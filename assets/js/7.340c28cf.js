(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{392:function(t,a,s){t.exports=s.p+"assets/img/git.4d1aa247.png"},393:function(t,a,s){t.exports=s.p+"assets/img/gitCommand.700b3972.png"},452:function(t,a,s){"use strict";s.r(a);var e=s(39),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规范"}},[t._v("#")]),t._v(" 规范")]),t._v(" "),e("h2",{attrs:{id:"vue相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue相关"}},[t._v("#")]),t._v(" vue相关")]),t._v(" "),e("ul",[e("li",[t._v("组件采用"),e("code",[t._v("class-style component syntax")]),t._v("模板撰写")]),t._v(" "),e("li",[t._v(".vue 文件由多个单词组成，无法以多个单词组成的文件用 "),e("code",[t._v("The")]),t._v(" 填充，并且要求驼峰命名，首字母大写，例如： "),e("code",[t._v("TheMenu")]),t._v("；根组件 "),e("code",[t._v("App")]),t._v(" 除外")]),t._v(" "),e("li",[t._v("单文件组件的文件名应该要么始终是单词大写开头 ("),e("code",[t._v("PascalCase")]),t._v(")")]),t._v(" "),e("li",[t._v('视图组件命名 "模块-功能组合",例如: '),e("code",[t._v("ProductTable")]),t._v("、"),e("code",[t._v("ProductSearch")])]),t._v(" "),e("li",[t._v('特殊视图组件命名(针对组件具有增加\\修改功能) "模块-功能组合-CreateUpdate"(CURD 模式),例如: '),e("code",[t._v("ProductCreateAndUpdate")])]),t._v(" "),e("li",[t._v("组件名应该始终是多个单词的，根组件 "),e("code",[t._v("App")]),t._v(" 除外")]),t._v(" "),e("li",[t._v("当在组件中使用 "),e("code",[t._v("data")]),t._v(" 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数")]),t._v(" "),e("li",[t._v("总是用 "),e("code",[t._v("key")]),t._v(" 配合 "),e("code",[t._v("v-for")]),t._v("(尽管现在的构建环境必须写 key)")]),t._v(" "),e("li",[t._v("永远不要把 "),e("code",[t._v("v-if")]),t._v(" 和 · 同时用在同一个元素上。")]),t._v(" "),e("li",[t._v("组件 "),e("code",[t._v("css")]),t._v(" 样式因采用 "),e("code",[t._v("BEM")]),t._v(" 策略，通过 "),e("code",[t._v("CSS Modules")]),t._v("避免 "),e("code",[t._v("css")]),t._v(" 冲突问题， 不使用 "),e("code",[t._v("scoped")]),t._v(" 作用域限制；")]),t._v(" "),e("li",[t._v("在插件、混入等扩展中始终为自定义的私有属性使用 "),e("code",[t._v("$_")]),t._v(" 前缀。并附带一个命名空间以回避和其它作者的冲突 (比如 $"),e("em",[t._v("yourPluginName")]),t._v(")")]),t._v(" "),e("li",[t._v("只要有能够拼接文件的构建系统，就把每个组件单独分成文件。")]),t._v(" "),e("li",[t._v("应用特定样式和约定的基础组件 (也就是展示类的、无逻辑的或无状态的组件) 应该全部以一个特定的前缀开头，比如 "),e("code",[t._v("Base")])]),t._v(" "),e("li",[t._v("和父组件紧密耦合的子组件应该以父组件名作为前缀命名。（如果一个组件只在某个父组件的场景下有意义，这层关系应该体现在其名字上。因为编辑器通常会按字母顺序组织文件，所以这样做可以把相关联的文件排在一起）")]),t._v(" "),e("li",[t._v("组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾（"),e("code",[t._v("SearchButtonClear")]),t._v("，"),e("code",[t._v("SearchButtonRun")]),t._v("，"),e("code",[t._v("SearchInputQuery")]),t._v("，"),e("code",[t._v("SettingsCheckboxLaunchOnStartup")]),t._v("）。")]),t._v(" "),e("li",[t._v("在单文件组件、字符串模板和 "),e("code",[t._v("JSX")]),t._v(" 中没有内容的组件应该是自闭合的——但在 DOM 模板里永远不要这样做。例如： 应用"),e("code",[t._v("<MyComponent/>")]),t._v("替换"),e("code",[t._v("<MyComponent></MyComponent>")])]),t._v(" "),e("li",[t._v("组件名应该倾向于完整单词而不是缩写")]),t._v(" "),e("li",[t._v("多个特性的元素应该分多行撰写，每个特性一行。")]),t._v(" "),e("li",[t._v("组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。")]),t._v(" "),e("li",[t._v("应该把复杂计算属性分割为尽可能多的更简单的属性。")]),t._v(" "),e("li",[e("code",[t._v("Prop")]),t._v(" 定义应该尽量详细, 非集合数据应当扁平化展示出来")]),t._v(" "),e("li",[t._v("在你提交的代码中，"),e("code",[t._v("prop")]),t._v(" 的定义应该尽量详细，至少需要指定其类型(此说明针对于非"),e("code",[t._v("typescript+vue")]),t._v("项目)。例如: "),e("code",[t._v("props: ['name']")]),t._v(" 更好的写法应该为 "),e("code",[t._v("props: {name: {type: String}} Typescript+vue")]),t._v("项目写法为 "),e("code",[t._v("@Prop() public name!: string")]),t._v(";")]),t._v(" "),e("li",[t._v("在声明 "),e("code",[t._v("prop")]),t._v(" 的时候，其命名应该始终使用 "),e("code",[t._v("camelCase")]),t._v("，而在模板和 "),e("code",[t._v("JSX")]),t._v(" 中应该始终使用 "),e("code",[t._v("kebab-case")])])]),t._v(" "),e("h2",{attrs:{id:"注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),e("h3",{attrs:{id:"vue组件注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue组件注释"}},[t._v("#")]),t._v(" Vue组件注释")]),t._v(" "),e("blockquote",[e("p",[t._v("文件说明注释应写在.vue 文件的 script 里, 如下:")])]),t._v(" "),e("div",{staticClass:"language-vue extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vue"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("lang")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("ts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token script"}},[e("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @author 组件开发人员\n * @description 组件描述\n * @prop {string} param1 - 接收Props名称\n * @prop {number|string} param1 - 接收Props名称\n * @prop {object[]} data, 数据\n * @prop {string} data[].monthlyShipments 月发件数\n * @prop {number} data[].NumberPeople 人数\n * ​@prop {string} data[].NumberPeoplePercentage  人数占比​\n * @prop {string} data[].NumberShipments  发件数\n * @prop {string} data[].NumberShipmentsPercentage​  发件数占比\n * @function functionName:(arg)=>ret - 必要时提供父组件的ref调用方法, arg为参数，ret返回返回值\n * @event on-event-name:(arg)=>ret - 必要时提供父组件响应事件,arg为参数，ret返回返回值\n * @slot name='' - 组件slot插槽(name值为空则为默认插槽)\n */")]),t._v("\n")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- html --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("style")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token style"}},[e("span",{pre:!0,attrs:{class:"token language-css"}},[t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* css */")]),t._v("\n")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("style")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("h3",{attrs:{id:"方法注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法注释"}},[t._v("#")]),t._v(" 方法注释")]),t._v(" "),e("blockquote",[e("p",[t._v("方法注释应写在方法的正上方(主要方法), 如下:")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @description 方法描述\n * @param {string|number} param1 - 形参名称\n * @event on-submit: (arg) => ret - 对我抛出事件名称,  arg为参数，ret返回返回值\n * @returns {number|string} - 函数返回值\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arg\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"git-规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-规范"}},[t._v("#")]),t._v(" git 规范")]),t._v(" "),e("h3",{attrs:{id:"分支规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支规范"}},[t._v("#")]),t._v(" 分支规范")]),t._v(" "),e("p",[e("img",{attrs:{src:s(392),alt:"策略图"}})]),t._v(" "),e("h3",{attrs:{id:"注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),e("ul",[e("li",[t._v("负责修复线上紧急Bug的hotfix分支在开发完成之后必须合并到当前正在开发的develop分支，否则会造成下次法本版本丢失hotfix的修复代码。")]),t._v(" "),e("li",[t._v("release分支在测试阶段可能会有频繁的修复Bug的行为，如果在此工程中同时进行下一个版本的迭代，必须在修复Bug之后将release分支合并到develop分支，否则会引起新版本发布后老版本的既有功能出现问题。")])]),t._v(" "),e("h3",{attrs:{id:"git-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-命令"}},[t._v("#")]),t._v(" Git 命令")]),t._v(" "),e("p",[e("img",{attrs:{src:s(393),alt:"Git命令"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);